{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routers.ts","webpack:///./src/app/components/data/data.component.html","webpack:///./src/app/components/data/data.component.ts","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/shared/navbar/navbar.component.html","webpack:///./src/app/components/shared/navbar/navbar.component.ts","webpack:///./src/app/components/template/template.component.html","webpack:///./src/app/components/template/template.component.ts","webpack:///./src/app/pipes/json-full.pipe.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<div class=\\\"container mt-5 mb-5\\\">\\n  <div class=\\\"row\\\">\\n\\n    <div class=\\\"col\\\">\\n      <router-outlet></router-outlet>\\n    </div>\\n\\n  </div>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'formularios';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\n// Para manejar la l칩gica del formulario los errores y dem치s en el HTML\nimport { FormsModule } from '@angular/forms';\n\n// Para manejar la l칩gica del formulario los errores y dem치s en el Component\nimport { ReactiveFormsModule } from '@angular/forms';\n\n// Routers\nimport { APP_ROUTING } from './app.routers';\n\n// Component\nimport { AppComponent } from './app.component';\nimport { TemplateComponent } from './components/template/template.component';\nimport { DataComponent } from './components/data/data.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { NavbarComponent } from './components/shared/navbar/navbar.component';\nimport { JsonFullPipe } from './pipes/json-full.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TemplateComponent,\n    DataComponent,\n    HomeComponent,\n    NavbarComponent,\n    JsonFullPipe\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    APP_ROUTING\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\r\n\r\nimport {TemplateComponent} from './components/template/template.component';\r\nimport {DataComponent} from './components/data/data.component';\r\nimport {HomeComponent} from './components/home/home.component';\r\n\r\nconst APP_ROUTES: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'htmltemplate', component: TemplateComponent },\r\n  { path: 'datatemplate', component: DataComponent},\r\n  { path: '**',  pathMatch: 'full', redirectTo: 'home' }\r\n];\r\n\r\nexport const APP_ROUTING = RouterModule.forRoot(APP_ROUTES, { useHash: true });\r\n","module.exports = \"<h4>Formularios\\r\\n  <small>data</small>\\r\\n</h4>\\r\\n<hr>\\r\\n<form [formGroup]=\\\"forma\\\" (ngSubmit)=\\\"guardar()\\\">\\r\\n\\r\\n  <div formGroupName=\\\"nombreCompleto\\\">\\r\\n\\r\\n    <div class=\\\"form-group row\\\"\\r\\n         [ngClass]=\\\"{'has-danger': forma.get('nombreCompleto.nombre').status == 'INVALID' && forma.get('nombreCompleto.nombre').touched}\\\">\\r\\n      <label class=\\\"col-2 col-form-label\\\">Nombre</label>\\r\\n      <div class=\\\"col-8\\\">\\r\\n\\r\\n        <input [formControlName]=\\\"['nombre']\\\"\\r\\n               class=\\\"form-control\\\"\\r\\n               type=\\\"text\\\"\\r\\n               placeholder=\\\"Nombre\\\"\\r\\n               name=\\\"nombre\\\"\\r\\n        >\\r\\n        <!--{{ forma | jsonFull }}-->\\r\\n        <div class=\\\"form-control-feedback\\\" *ngIf=\\\"forma.get('nombreCompleto.nombre').touched && forma.controls['nombreCompleto'].controls['nombre'].errors?.required\\\">\\r\\n          Este campo es obligatorio *\\r\\n        </div>\\r\\n        <div class=\\\"form-control-feedback\\\"\\r\\n             *ngIf=\\\"forma.controls['nombreCompleto'].controls['nombre'].errors?.minlength\\\">\\r\\n          M칤nimo {{forma.controls['nombreCompleto'].controls['nombre'].errors?.minlength.requiredLength}} caracteres.\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group row\\\"\\r\\n         [ngClass]=\\\"{'has-danger': forma.get('nombreCompleto.apellido').status == 'INVALID' && forma.get('nombreCompleto.apellido').touched}\\\">\\r\\n      <label class=\\\"col-2 col-form-label\\\">Apellido</label>\\r\\n      <div class=\\\"col-8\\\">\\r\\n\\r\\n        <input [formControlName]=\\\"['apellido']\\\"\\r\\n               class=\\\"form-control\\\"\\r\\n               type=\\\"text\\\"\\r\\n               placeholder=\\\"Apellido\\\"\\r\\n               name=\\\"apellido\\\"\\r\\n        >\\r\\n\\r\\n        <div *ngIf=\\\"forma.get('nombreCompleto.apellido').touched && forma.get('nombreCompleto.apellido')['errors']?.required\\\">\\r\\n          Este campo es obligatorio *</div>\\r\\n        <div *ngIf=\\\"forma.get('nombreCompleto.apellido')['errors']?.minlength\\\">\\r\\n          M칤nimo {{ forma.get('nombreCompleto.apellido')['errors']?.minlength.requiredLength }} caracteres.\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\"\\r\\n       [ngClass]=\\\"{'has-danger': forma.get('email').status == 'INVALID' && forma.get('email').touched}\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Correo</label>\\r\\n    <div class=\\\"col-md-8\\\">\\r\\n\\r\\n      <input [formControlName]=\\\"['email']\\\"\\r\\n             class=\\\"form-control\\\"\\r\\n             type=\\\"email\\\"\\r\\n             placeholder=\\\"Correo electr&oacute;nico\\\"\\r\\n             name=\\\"email\\\"\\r\\n      >\\r\\n\\r\\n      <div *ngIf=\\\"forma.get('email').touched && forma.controls['email'].errors?.required\\\">\\r\\n        Este campo es obligatorio *</div>\\r\\n      <div *ngIf=\\\"forma.controls['email'].errors?.pattern\\\">{{forma.controls['email'].errors?.pattern.actualValue}} No es\\r\\n        un Email valido\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <div class=\\\"form-group row\\\"\\r\\n       [ngClass]=\\\"{'has-danger': forma.get('username').status == 'INVALID' && forma.get('username').touched}\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Username</label>\\r\\n    <div class=\\\"col-8\\\">\\r\\n\\r\\n      <input [formControlName]=\\\"['username']\\\"\\r\\n             class=\\\"form-control\\\"\\r\\n             type=\\\"text\\\"\\r\\n             placeholder=\\\"Usuario\\\"\\r\\n\\r\\n      >\\r\\n\\r\\n      <div class=\\\"form-control-feedback\\\" *ngIf=\\\"forma.get('username').touched && forma.controls['username'].errors?.required\\\">\\r\\n        Este campo es obligatorio *\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-control-feedback\\\" *ngIf=\\\"forma.controls['username'].errors?.existe\\\">\\r\\n        Este nombre de usuario existe\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <div class=\\\"form-group row\\\"\\r\\n       [ngClass]=\\\"{'has-danger': forma.get('password1').status == 'INVALID' && forma.get('password1').touched}\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Password</label>\\r\\n    <div class=\\\"col-md-8\\\">\\r\\n\\r\\n      <input [formControlName]=\\\"['password1']\\\"\\r\\n             class=\\\"form-control\\\"\\r\\n             type=\\\"password\\\"\\r\\n             placeholder=\\\"Password\\\"\\r\\n\\r\\n      >\\r\\n\\r\\n      <div *ngIf=\\\"forma.get('password1').touched && forma.controls['password1'].errors?.required\\\">\\r\\n        Este campo es obligatorio *</div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\"\\r\\n       [ngClass]=\\\"{'has-danger': forma.get('password2').status == 'INVALID' && forma.get('password2').touched}\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Repetir</label>\\r\\n    <div class=\\\"col-md-8\\\">\\r\\n\\r\\n      <input [formControlName]=\\\"['password2']\\\"\\r\\n             class=\\\"form-control\\\"\\r\\n             type=\\\"password\\\"\\r\\n             placeholder=\\\"Repetir Password\\\"\\r\\n\\r\\n      >\\r\\n\\r\\n      <div *ngIf=\\\"forma.get('password2').touched && forma.controls['password2'].errors?.required\\\">\\r\\n        Este campo es obligatorio *</div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n  <div [formArrayName]=\\\"['pasatiempos']\\\">\\r\\n\\r\\n    <div class=\\\"form-group row\\\"\\r\\n         *ngFor=\\\"let item of forma.controls['pasatiempos'].controls; let i = index\\\"\\r\\n         [ngClass]=\\\"{'has-danger': forma.get('pasatiempos').controls[i].status == 'INVALID' && forma.get('pasatiempos').controls[i].touched}\\\"\\r\\n    >\\r\\n      <label class=\\\"col-2 col-form-label\\\">Pasatiempos {{ i + 1 }}</label>\\r\\n\\r\\n        <div class=\\\"col-md-8\\\">\\r\\n\\r\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"Pasatiempos\\\" name=\\\"pasatiempos\\\" [formControlName]=\\\"[i]\\\">\\r\\n\\r\\n          <div *ngIf=\\\"forma.controls['pasatiempos'].controls[i].touched && forma.controls['pasatiempos'].controls[i].errors?.required\\\">\\r\\n            Este campo es obligatorio *</div>\\r\\n\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group row\\\">\\r\\n      <label class=\\\"col-2 col-form-label\\\">&nbsp;</label>\\r\\n      <div class=\\\"input-group col-md-8\\\">\\r\\n        <button (click)=\\\"agregarPsatiempo()\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">Nuevo pasatiempo</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  <div class=\\\"form-group row\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">&nbsp;</label>\\r\\n    <div class=\\\"input-group col-md-8\\\">\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-outline-primary\\\" [disabled]=\\\"forma.invalid\\\">\\r\\n        Guardar\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</form>\\r\\n\\r\\n  <pre>\\r\\n\\r\\n    {{ forma.valid }}\\r\\n    {{ forma | jsonFull }}\\r\\n\\r\\n  </pre>\\r\\n\"","import { Component } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators} from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-data',\n  templateUrl: './data.component.html',\n  styles: []\n})\nexport class DataComponent {\n\n  forma: FormGroup;\n\n  usuario: any = {\n\n    nombreCompleto: {\n\n      nombre: 'Dennys',\n      apellido: 'Marquez'\n\n    },\n    email: 'dennysjmarquez@gmail.com',\n    // pasatiempos: ['Correr','Dormir','Comer']\n\n  };\n\n  constructor() {\n\n    this.forma = new FormGroup({\n\n      nombreCompleto: new FormGroup({\n\n        nombre: new FormControl('', [\n          Validators.required,\n          Validators.minLength(3)\n        ]),\n        apellido: new FormControl('', [\n          Validators.required,\n          Validators.minLength(3),\n          this.validacionPersonalizada\n        ])\n\n      }),\n      email: new FormControl('', [\n        Validators.required,\n        Validators.pattern(/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/)\n      ]),\n      pasatiempos: new FormArray([\n        new FormControl('Correr', [\n          Validators.required\n        ])\n      ]),\n      username: new FormControl('', [\n        Validators.required\n      ], [\n        this.existeUsuario\n      ]),\n      password1: new FormControl('', [\n        Validators.required\n      ]),\n      password2: new FormControl()\n\n    });\n\n    // Carga de los valores desde el Objeto usuario\n    // this.forma.setValue(this.usuario);\n\n    //Otra forma de agregar los validadores\n    this.forma.controls['password2'].setValidators([\n      Validators.required,\n      this.noIgual.bind(this)\n    ]);\n\n    // Escuchar los cambios del value de un (input)\n    this.forma.get('nombreCompleto.nombre').valueChanges.subscribe( data => {\n\n      console.log(data);\n\n    });\n\n    // Escuchar los cambios del estatus de un (input)\n    this.forma.get('nombreCompleto.nombre').statusChanges.subscribe( data => {\n\n      console.log(data);\n\n    });\n\n\n  }\n\n  agregarPsatiempo(){\n\n    (<FormArray>this.forma.controls['pasatiempos']).push(\n      new FormControl('', [\n        Validators.required\n      ])\n    );\n  }\n\n  validacionPersonalizada(control: FormControl): {[s:string]: boolean}{\n\n    if(control.value == 'marquez'){\n        return {\n          noApellido: true\n        }\n    }\n\n    return null;\n\n  }\n\n  noIgual(control: FormControl): {[s:string]: boolean}{\n\n    if(control.value !== this.forma.controls['password1'].value){\n      return {\n        noIgual: true\n      }\n    }\n\n    return null;\n\n  }\n\n  existeUsuario(control:FormControl): Promise<any> | Observable<any>{\n\n    let promesa = new Promise((resolve, reject) =>{\n\n      setTimeout(()=>{\n\n        if(control.value == \"escorpicon\"){\n\n          resolve({existe: true})\n\n        }else{\n\n          resolve(null);\n\n        }\n\n      }, 3000);\n\n    });\n\n    return promesa;\n\n  }\n\n  guardar() {\n\n    console.log(this.forma.value);\n    console.log(this.forma);\n\n    // Resetea el formulario\n    // this.forma.reset();\n\n    // Resetea el formulario y carga valores\n    // this.forma.reset(this.usuario);\n\n    // Establece un valor a l campo\n    // this.forma.controls['email'].setValue('ddddd@ddd.com');\n\n  }\n\n}\n","module.exports = \"<h2>Ejemplos de Form l칩gica en el HTML o en el Componente, Diferencias</h2>\\r\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styles: []\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<nav class=\\\"navbar navbar-toggleable-md navbar navbar-inverse bg-inverse\\\">\\n  <button class=\\\"navbar-toggler navbar-toggler-right\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarNav\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\n    <ul class=\\\"navbar-nav\\\">\\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['home']\\\">Home</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['htmltemplate']\\\">L칩gica en el HTML</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" [routerLinkActive]=\\\"['active']\\\">\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['datatemplate']\\\">L칩gica en el Component</a>\\n      </li>\\n    </ul>\\n  </div>\\n</nav>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styles: []\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h4>Formularios\\r\\n  <small>template</small>\\r\\n</h4>\\r\\n<hr>\\r\\n<form novalidate (ngSubmit)=\\\"guardar(forma)\\\" #forma=\\\"ngForm\\\">\\r\\n\\r\\n  <div class=\\\"form-group row\\\" [ngClass]=\\\"{'has-danger': nombre.status == 'INVALID' && nombre.touched}\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Nombre</label>\\r\\n    <div class=\\\"col-8 col-form-label\\\">\\r\\n\\r\\n      <input [(ngModel)]=\\\"usuario.nombre\\\"\\r\\n             #nombre=\\\"ngModel\\\"\\r\\n             class=\\\"form-control\\\"\\r\\n             type=\\\"text\\\"\\r\\n             placeholder=\\\"Nombre\\\"\\r\\n             name=\\\"nombre\\\"\\r\\n             required=\\\"\\\"\\r\\n             minlength=\\\"3\\\"\\r\\n      >\\r\\n\\r\\n      <div class=\\\"form-control-feedback\\\" *ngIf=\\\"nombre?.errors?.required\\\">Este campo es obligatorio *</div>\\r\\n      <div class=\\\"form-control-feedback\\\" *ngIf=\\\"nombre?.errors?.minlength\\\">M칤nimo {{nombre?.errors?.minlength.requiredLength}} caracteres.</div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Apellido</label>\\r\\n    <div class=\\\"col-8 col-form-label\\\">\\r\\n\\r\\n      <input\\r\\n        [(ngModel)]=\\\"usuario.apellido\\\"\\r\\n        #apellido=\\\"ngModel\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        type=\\\"text\\\"\\r\\n        placeholder=\\\"Apellido\\\"\\r\\n        name=\\\"apellido\\\"\\r\\n        required=\\\"\\\"\\r\\n        minlength=\\\"3\\\"\\r\\n      >\\r\\n\\r\\n      <div *ngIf=\\\"apellido?.errors?.required\\\">Este campo es obligatorio *</div>\\r\\n      <div *ngIf=\\\"apellido?.errors?.minlength\\\">M칤nimo {{ apellido?.errors?.minlength.requiredLength }} caracteres.</div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Sexo</label>\\r\\n    <div class=\\\"col-8 col-form-label\\\">\\r\\n\\r\\n      <label class=\\\"custom-control mb-0 custom-radio\\\" *ngFor=\\\"let sx of sexos;\\\">\\r\\n\\r\\n        <input\\r\\n          [(ngModel)]=\\\"usuario.sexo\\\"\\r\\n          name=\\\"sexo\\\"\\r\\n          type=\\\"radio\\\"\\r\\n          class=\\\"custom-control-input\\\"\\r\\n          [value]=\\\"sx.value\\\"\\r\\n          required=\\\"\\\"\\r\\n\\r\\n        >\\r\\n\\r\\n        <span class=\\\"custom-control-indicator\\\"></span>\\r\\n        <span class=\\\"custom-control-description\\\">{{ sx.sexo }}</span>\\r\\n      </label>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Pais</label>\\r\\n    <div class=\\\"col-8 col-form-label\\\">\\r\\n\\r\\n      <select [(ngModel)]=\\\"usuario.pais\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              name=\\\"pais\\\"\\r\\n              required=\\\"\\\"\\r\\n      >\\r\\n        <option value=\\\"\\\">Seleccione un pais</option>\\r\\n        <option *ngFor=\\\"let item of paises;\\\" [value]=\\\"item.codigo\\\">{{ item.nombre }}</option>\\r\\n\\r\\n      </select>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Correo</label>\\r\\n    <div class=\\\"col-md-8\\\">\\r\\n\\r\\n      <input class=\\\"form-control\\\"\\r\\n             type=\\\"email\\\"\\r\\n             placeholder=\\\"Correo electr&oacute;nico\\\"\\r\\n             name=\\\"email\\\"\\r\\n             [(ngModel)]=\\\"usuario.email\\\"\\r\\n             #email=\\\"ngModel\\\"\\r\\n             required=\\\"\\\"\\r\\n             pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,3}$\\\"\\r\\n\\r\\n      >\\r\\n\\r\\n      <div *ngIf=\\\"email['errors']?.required\\\">Este campo es obligatorio *</div>\\r\\n      <div *ngIf=\\\"email?.errors?.pattern\\\">{{email?.errors.pattern.actualValue}} No es un Email valido</div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">Acepta</label>\\r\\n    <div class=\\\"col-8 col-form-label\\\">\\r\\n\\r\\n      <label class=\\\"custom-control mb-0 custom-checkbox\\\">\\r\\n        <input\\r\\n          type=\\\"checkbox\\\"\\r\\n          name=\\\"acepta\\\"\\r\\n          class=\\\"custom-control-input\\\"\\r\\n          [(ngModel)]=\\\"usuario.acepta\\\"\\r\\n          required=\\\"\\\"\\r\\n\\r\\n        >\\r\\n        <span class=\\\"custom-control-indicator\\\"></span>\\r\\n        <span class=\\\"custom-control-description\\\">Aceptas las condiciones</span>\\r\\n      </label>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-group row\\\">\\r\\n    <label class=\\\"col-2 col-form-label\\\">&nbsp;</label>\\r\\n    <div class=\\\"input-group col-md-8\\\">\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-outline-primary\\\" [disabled]=\\\"forma.invalid\\\">\\r\\n        Guardar\\r\\n      </button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</form>\\r\\n\\r\\n<pre>\\r\\n\\r\\n  {{ usuario | json }}\\r\\n\\r\\n</pre>\\r\\n\"","import {Component} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'app-template',\n  templateUrl: './template.component.html',\n  styles: [`\n\n    .ng-invalid.ng-touched:not(form) {\n      border: 1px solid red;\n    }\n\n  `]\n})\nexport class TemplateComponent {\n\n  usuario: any = {\n    nombre: null,\n    apellido: null,\n    sexo: 'hombre',\n    email: null,\n    pais: '',\n    acepta: false\n  };\n\n  paises: Array<any> = [\n    {\n      codigo: 'CRI',\n      nombre: 'Costa Rica'\n    },\n    {\n      codigo: 'ESP',\n      nombre: 'Espa침a'\n    }\n  ];\n\n  sexos: any[] = [\n    {'sexo': 'Hombre', 'value': 'hombre'},\n    {'sexo': 'Mujer', 'value': 'mujer'},\n    {'sexo': 'Sin definir', 'value': 'nodefinido'}\n    ];\n\n  constructor() {\n  }\n\n  guardar(forma: NgForm) {\n\n    console.log('NgForm', forma);\n    console.log('Valor forma', forma.value);\n    console.log('Usuario', this.usuario);\n\n    forma.reset();\n\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'jsonFull'\n})\nexport class JsonFullPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n\n    console.log(value);\n\n    return '';\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}